name: CI

on:
  push:
    branches:
      - 'sandbox**'
      - 'feat**'
      - 'master'
      - 'develop'
      - 'hotfix**'
      - 'bugfix**'
      - 'fix**'
      - 'main'

env:
  BRANCH: ${{ github.ref_name }}
  APPNAME: 'strada-monitoramento'
  DOCKERFILE: 'Dockerfile'
  MANIFEST_PATH: 'strada-monitoramento'
  MANIFEST_REPO: 'carguero/prod-kubernetes-manifest'

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.vars.outputs.tag }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}

      - name: Setup SQL Server docker container
        run: docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=@nuvem1234' -p 1434:1433 --name sql -d mcr.microsoft.com/mssql/server:2017-latest

      - name: Setup RabbitMQ docker container
        run: docker run -e 'RabbitMq__HostName=localhost' -e 'RabbitMq__Port=5672' -e 'RabbitMq__UserName=guest' -e 'RabbitMq__Password=guest' -e 'RabbitMq__VHost=/' -p 5672:5672 --name rabbit -d heidiks/rabbitmq-delayed-message-exchange:latest

      - name: Setup mongodb
        run: docker run -p 27018:27017 -d mongo:latest

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Install project dependencies
        run: dotnet restore

      - name: Cache Dotnet
        uses: actions/cache@v1
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Test and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        run: |
          REPORT_PATH="tests-report"
          mkdir -p $REPORT_PATH
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:"carguero_strada-monitoramento" /o:"carguero1" /d:sonar.login="${{ secrets.SONARQUBE_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          dotnet test test/Strada.Monitoramento.UnitTests/Strada.Monitoramento.UnitTests.csproj --no-build \
          /p:CollectCoverage=true /p:CoverletOutputFormat=\"opencover,lcov\" /p:CoverletOutput=${REPORT_PATH}/unit /p:Exclude=[xunit.*]*
          dotnet test test/Strada.Monitoramento.IntegrationTests/Strada.Monitoramento.IntegrationTests.csproj --no-build \
          /p:CollectCoverage=true /p:CoverletOutputFormat=\"opencover,lcov\" /p:CoverletOutput=${REPORT_PATH}/integration /p:Exclude=[xunit.*]*
          dotnet test test/Strada.Monitoramento.Tests.Shared/Strada.Monitoramento.Tests.Shared.csproj --no-build \
          /p:CollectCoverage=true /p:CoverletOutputFormat=\"opencover,lcov\" /p:CoverletOutput=${REPORT_PATH}/shared /p:Exclude=[xunit.*]*
          dotnet clean
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONARQUBE_TOKEN }}"

  loop:
    runs-on: ubuntu-latest
    needs: [test]
    outputs:
      MATRIX: ${{ steps.matrix.outputs.MATRIX }}
    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: ${{ env.BRANCH }}

      - name: Set variable
        run: |
          #!/bin/bash
          count=$(ls Dockerfile* | wc -l | sed 's/ //g')
          for i in $(ls Dockerfile*)
          do
            appname=$(grep appname $i | awk -F "=" '{print $2}')
            manifestpath=$(grep manifestpath $i | awk -F "=" '{print $2}')
            dockerfile=$(grep dockerfile $i | awk -F "=" '{print $2}')
            if [ ! -z $dockerfile ]
            then
              if [ $count != 1 ]
              then
                APPS+=$(
                echo "{
                        '\"appname\"': '\"${appname}\"',
                        '\"dockerfile\"': '\"${dockerfile}\"',
                        '\"manifestpath\"': '\"${{ github.event.inputs.choice }}/${manifestpath}\"'
                      },")
               ((count=$count-1))
              else
                APPS+=$(
                echo "{
                        '\"appname\"': '\"${appname}\"',
                        '\"dockerfile\"': '\"${dockerfile}\"',
                        '\"manifestpath\"': '\"${{ github.event.inputs.choice }}/${manifestpath}\"'
                      }")
              fi
            fi
          done
          echo "MATRIX_TMP=$(echo [$APPS])" >> $GITHUB_ENV

      - name: Export Matrix
        id: matrix
        run: |
          echo "::set-output name=MATRIX::${{ env.MATRIX_TMP }}"

  build_docker_aws:
    runs-on: ubuntu-latest
    needs: [test,loop]
    outputs:
      TAG: ${{ steps.vars.outputs.tag }}

    strategy:
      max-parallel: 5
      matrix:
        include: ${{ fromJson(needs.loop.outputs.MATRIX) }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set output
        id: vars
        run: |
          echo "::set-output name=tag::$(echo -n ${{ env.BRANCH }} | sed -e 's/[^[:alnum:]]/-/g' | tr -s '-' | tr A-Z a-z)-$GITHUB_ACTOR"

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: 815538987058.dkr.ecr.us-east-1.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push - ${{ matrix.appname }}
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          push: true
          tags: 815538987058.dkr.ecr.us-east-1.amazonaws.com/${{ matrix.appname }}:${{ steps.vars.outputs.tag }}
          no-cache: true

  build_docker_azure:
    runs-on: ubuntu-latest
    needs: [test,loop]
    outputs:
      TAG: ${{ steps.vars.outputs.tag }}

    strategy:
      max-parallel: 5
      matrix:
        include: ${{ fromJson(needs.loop.outputs.MATRIX) }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set output
        id: vars
        run: |
          echo "::set-output name=tag::$(echo -n ${{ env.BRANCH }} | sed -e 's/[^[:alnum:]]/-/g' | tr -s '-' | tr A-Z a-z)-$GITHUB_ACTOR"

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: prdbrcontainerregistry.azurecr.io
          username: ${{ secrets.CARGUERO_REGISTRY_USERNAME }}
          password: ${{ secrets.CARGUERO_REGISTRY_PASSWORD }}

      - name: Build and push - ${{ matrix.appname }}
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          push: true
          tags: ${CARGUERO_REGISTRY}/${{ matrix.appname }}:${{ steps.vars.outputs.tag }}
          no-cache: true