name: Build Homolog

on:
  push:
    branches:
      - homolog
  workflow_dispatch:
    inputs:
      choice:
        type: choice
        description: Escolha o Ambiente
        options:
          - homolog
          - homolog2
      account:
        description: 'Insira a Branch'
        required: true
      generate:
        description: 'Insira uma tag'
        required: true
        default: ''

env:
  BRANCH: ${{ github.event.inputs.account }}
  APPNAME: 'strada-monitoramento'
  DOCKERFILE: 'Dockerfile'
  MANIFEST_PATH: 'strada-monitoramento'
  MANIFEST_REPO: 'carguero/homolog-kubernetes-manifest'
  MANIFEST_REPO: 'carguero/${{ github.event.inputs.choice }}-kubernetes-manifest'

jobs:
  loop:
    runs-on: ubuntu-latest
    outputs:
      MATRIX: ${{ steps.matrix.outputs.MATRIX }}
    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: ${{ env.BRANCH }}

      - name: Set variable
        run: |
          #!/bin/bash
          echo $(pwd)
          echo $(ls)
          count=$(ls Dockerfile* | wc -l | sed 's/ //g')
          for i in $(ls Dockerfile*)
          do
            appname=$(grep appname $i | awk -F "=" '{print $2}')
            manifestpath=$(grep manifestpath $i | awk -F "=" '{print $2}')
            dockerfile=$(grep dockerfile $i | awk -F "=" '{print $2}')
            if [ ! -z $dockerfile ]
            then
              if [ $count != 1 ]
              then
                APPS+=$(
                echo "{
                        '\"appname\"': '\"${appname}\"',
                        '\"dockerfile\"': '\"${dockerfile}\"',
                        '\"manifestpath\"': '\"${{ github.event.inputs.choice }}/${manifestpath}\"'
                      },")
               ((count=$count-1))
              else
                APPS+=$(
                echo "{
                        '\"appname\"': '\"${appname}\"',
                        '\"dockerfile\"': '\"${dockerfile}\"',
                        '\"manifestpath\"': '\"${{ github.event.inputs.choice }}/${manifestpath}\"'
                      }")
              fi
            fi
          done
          echo "MATRIX_TMP=$(echo [$APPS])" >> $GITHUB_ENV
      - name: Export Matrix
        id: matrix
        run: |
          echo "::set-output name=MATRIX::${{ env.MATRIX_TMP }}"

  build:
    runs-on: ubuntu-latest
    needs: [loop]
    outputs:
      TAG: ${{ steps.vars.outputs.tag }}

    strategy:
      max-parallel: 25
      matrix:
        include: ${{ fromJson(needs.loop.outputs.MATRIX) }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set output
        id: vars
        run: |
          if [ "${{ env.BRANCH }}" = "" ]
          then
            echo "::set-output name=tag::$(echo -n ${{ github.ref_name }} | sed -e 's/[^[:alnum:]]/-/g' | tr -s '-' | tr A-Z a-z)"
          else
            echo "::set-output name=tag::$(echo -n ${{ env.BRANCH }} | sed -e 's/[^[:alnum:]]/-/g' | tr -s '-' | tr A-Z a-z)-${{ github.event.inputs.generate }}"
          fi

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: 815538987058.dkr.ecr.us-east-1.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push - ${{ matrix.appname }}
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          push: true
          tags: 815538987058.dkr.ecr.us-east-1.amazonaws.com/${{ matrix.appname }}:${{ steps.vars.outputs.tag }}
          no-cache: true

  update:
    runs-on: ubuntu-latest
    needs: [loop,build]
    steps:
      - name: Check out Argo Manifests
        uses: actions/checkout@master
        with:
          repository: ${{ env.MANIFEST_REPO }}
          ref: master
          token: ${{ secrets.CI_TOKEN }}

      - name: Update image deployment
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.13.5/yq_darwin_amd64.tar.gz -O yq_darwin_amd64.tar.gz && tar -xvf yq_darwin_amd64.tar.gz && chmod +x yq_darwin_amd64 && mv yq_darwin_amd64 yq
          JSON=$(echo "${{ needs.loop.outputs.MATRIX }}" | sed "s/'/\"/g")
          for i in $( echo $JSON | jq -c '.[]' )
          do
            APPNAME=$( echo "$i" | jq -r '.appname')
            MANIFEST_PATH=$( echo "$i" | jq -r '.manifestpath')
            export IMAGE_TAG="815538987058.dkr.ecr.us-east-1.amazonaws.com/$APPNAME":${{ needs.build.outputs.TAG }}
            yq e '.spec.template.spec.containers[0].image = env(IMAGE_TAG)' -i $MANIFEST_PATH/deployment-patch.yaml
          done
          rm -f yq yq.1 install-man-page.sh yq_darwin_amd64.tar.gz
      - name: Commit & Push Argo
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.CI_TOKEN }}
          repository: ${{ env.MANIFEST_REPO }}
          branch: master